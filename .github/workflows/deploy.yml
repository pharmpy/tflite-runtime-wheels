name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:


jobs:
  build-wheels:
    name: build-wheels
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          platform: macos-latest
          python-version: '3.12'
    steps:
    - name: Clone tensorflow 
      uses: actions/checkout@v2
      with:
        repository: tensorflow/tensorflow
        ref: refs/tags/v2.15.0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install python dependencies
      run: pip install numpy pybind11 wheel

    - name: Patch build script
      run: |
        echo 'diff --git a/tensorflow/lite/tools/pip_package/build_pip_package_with_cmake.sh b/tensorflow/lite/tools/pip_package/build_pip_package_with_cmake.sh' > build.patch
        echo 'index 7ca118b89f9..10593da6d41 100755' >> build.patch
        echo '--- a/tensorflow/lite/tools/pip_package/build_pip_package_with_cmake.sh' >> build.patch
        echo '+++ b/tensorflow/lite/tools/pip_package/build_pip_package_with_cmake.sh' >> build.patch
        echo '@@ -107,14 +107,14 @@ case "${TENSORFLOW_TARGET}" in' >> build.patch
        echo '       "${TENSORFLOW_LITE_DIR}"' >> build.patch
        echo '     ;;' >> build.patch
        echo '   native)' >> build.patch
        echo '-    BUILD_FLAGS=${BUILD_FLAGS:-"-march=native -I${PYTHON_INCLUDE} -I${PYBIND11_INCLUDE} -I${NUMPY_INCLUDE}"}' >> build.patch
        echo '+    BUILD_FLAGS=${BUILD_FLAGS:-"-march=native -I${PYTHON_INCLUDE} -I${PYBIND11_INCLUDE} -I${NUMPY_INCLUDE} -static-libstdc++ -static-libgcc"}' >> build.patch
        echo '     cmake \' >> build.patch
        echo '       -DCMAKE_C_FLAGS="${BUILD_FLAGS}" \' >> build.patch
        echo '       -DCMAKE_CXX_FLAGS="${BUILD_FLAGS}" \' >> build.patch
        echo '       "${TENSORFLOW_LITE_DIR}"' >> build.patch
        echo '     ;;' >> build.patch
        echo '   *)' >> build.patch
        echo '-    BUILD_FLAGS=${BUILD_FLAGS:-"-I${PYTHON_INCLUDE} -I${PYBIND11_INCLUDE} -I${NUMPY_INCLUDE}"}' >> build.patch
        echo '+    BUILD_FLAGS=${BUILD_FLAGS:-"-I${PYTHON_INCLUDE} -I${PYBIND11_INCLUDE} -I${NUMPY_INCLUDE} -static-libstdc++ -static-libgcc"}' >> build.patch
        echo '     cmake \' >> build.patch
        echo '       -DCMAKE_C_FLAGS="${BUILD_FLAGS}" \' >> build.patch
        echo '       -DCMAKE_CXX_FLAGS="${BUILD_FLAGS}" \' >> build.patch
        echo '@@ -122,7 +122,7 @@ case "${TENSORFLOW_TARGET}" in' >> build.patch
        echo '     ;;' >> build.patch
        echo ' esac' >> build.patch
        echo '' >> build.patch
        echo '-cmake --build . --verbose -j ${BUILD_NUM_JOBS} -t _pywrap_tensorflow_interpreter_wrapper' >> build.patch
        echo '+cmake --build . --verbose -j 1 ${BUILD_NUM_JOBS} -t _pywrap_tensorflow_interpreter_wrapper' >> build.patch
        echo ' cd "${BUILD_DIR}"' >> build.patch
        echo '' >> build.patch
        echo ' case "${TENSORFLOW_TARGET}" in' >> build.patch
        git apply build.patch
      shell: bash

    - name: Build wheel
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
            export PATH=/mingw64/bin:/usr/bin:/c/Users/runneradmin/bin:/c/Program\ Files/MongoDB/Server/5.0/bin:/c/aliyun-cli:/c/vcpkg:/c/Program\ Files\ \(x86\)/NSIS:/c/tools/zstd:/c/Program\ Files/Mercurial:/c/hostedtoolcache/windows/stack/2.9.3/x64:/c/cabal/bin:/c/ghcup/bin:/c/Program\ Files/dotnet:/c/mysql/bin:/c/Program\ Files/R/R-4.3.0/bin/x64:/c/SeleniumWebDrivers/GeckoDriver:/c/Program\ Files\ \(x86\)/sbt/bin:/c/Program\ Files\ \(x86\)/GitHub\ CLI:/bin:/c/Program\ Files\ \(x86\)/pipx_bin:/c/npm/prefix:/c/hostedtoolcache/windows/go/1.20.3/x64/bin:/c/Program\ Files/OpenSSL/bin:/c/tools/kotlinc/bin:/c/hostedtoolcache/windows/Java_Temurin-Hotspot_jdk/8.0.372-7/x64/bin:/c/Program\ Files/ImageMagick-7.1.1-Q16-HDRI:/c/Program\ Files\ \(x86\)/Microsoft\ SDKs/Azure/CLI2/wbin:/c/ProgramData/kind:/c/Program\ Files/Microsoft/jdk-11.0.16.101-hotspot/bin:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/c/Program\ Files/dotnet:/c/ProgramData/Chocolatey/bin:/c/Program\ Files/PowerShell/7:/c/Program\ Files/Microsoft/Web\ Platform\ Installer:/c/Program\ Files/Microsoft\ SQL\ Server/Client\ SDK/ODBC/170/Tools/Binn:/c/Program\ Files/Microsoft\ SQL\ Server/150/Tools/Binn:/c/Strawberry/c/bin:/c/Strawberry/perl/site/bin:/c/Strawberry/perl/bin:/c/ProgramData/chocolatey/lib/pulumi/tools/Pulumi/bin:/c/Program\ Files/TortoiseSVN/bin:/c/Program\ Files/CMake/bin:/c/ProgramData/chocolatey/lib/maven/apache-maven-3.8.7/bin:/c/Program\ Files/Microsoft\ Service\ Fabric/bin/Fabric/Fabric.Code:/c/Program\ Files/Microsoft\ SDKs/Service\ Fabric/Tools/ServiceFabricLocalClusterManager:/c/Program\ Files/nodejs:/cmd:/mingw64/bin:/usr/bin:/c/Program\ Files/GitHub\ CLI:/c/tools/php:/c/Program\ Files\ \(x86\)/sbt/bin:/c/SeleniumWebDrivers/ChromeDriver:/c/SeleniumWebDrivers/EdgeDriver:/c/Program\ Files/Amazon/AWSCLIV2:/c/Program\ Files/Amazon/SessionManagerPlugin/bin:/c/Program\ Files/Amazon/AWSSAMCLI/bin:/c/Program\ Files/Microsoft\ SQL\ Server/130/Tools/Binn:/c/Program\ Files/LLVM/bin:/c/Users/runneradmin/.dotnet/tools:/c/Users/runneradmin/.cargo/bin:/c/Users/runneradmin/AppData/Local/Microsoft/WindowsApps
            if [ "${{ matrix.python-version }}" == "3.9" ]; then
                export PATH=/c/Users/runneradmin/AppData/Roaming/Python/Python39/Scripts:/c/hostedtoolcache/windows/Python/3.9.13/x64/Scripts:/c/hostedtoolcache/windows/Python/3.9.13/x64:$PATH
            fi
            if [ "${{ matrix.python-version }}" == "3.10" ]; then
                export PATH=/c/Users/runneradmin/AppData/Roaming/Python/Python310/Scripts:/c/hostedtoolcache/windows/Python/3.10.11/x64/Scripts:/c/hostedtoolcache/windows/Python/3.10.11/x64:$PATH
            fi
            if [ "${{ matrix.python-version }}" == "3.11" ]; then
                export PATH=/c/Users/runneradmin/AppData/Roaming/Python/Python311/Scripts:/c/hostedtoolcache/windows/Python/3.11.3/x64/Scripts:/c/hostedtoolcache/windows/Python/3.11.3/x64:$PATH
            fi
            if [ "${{ matrix.python-version }}" == "3.12" ]; then
                export PATH=/c/Users/runneradmin/AppData/Roaming/Python/Python312/Scripts:/c/hostedtoolcache/windows/Python/3.12.0/x64/Scripts:/c/hostedtoolcache/windows/Python/3.12.0/x64:$PATH
            fi
        fi
        if [ "$RUNNER_OS" == "Linux" ]; then
            . tensorflow/lite/tools/pip_package/build_pip_package_with_cmake.sh
        else
            . tensorflow/lite/tools/pip_package/build_pip_package_with_bazel.sh
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: wheel-${{ matrix.platform }}-${{ matrix.python-version }}
        path: tensorflow/lite/tools/pip_package/gen/tflite_pip/python3/dist/*.whl

  upload-wheels:
    needs: build-wheels
    name: upload-wheels
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
    - name: Prepare upload
      run: |
        mkdir upload
        find . -name '*.whl' | xargs cp -t upload/
        ls -lR
